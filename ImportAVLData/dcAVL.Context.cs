//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ImportAVLData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dcAVL : DbContext
    {
        public dcAVL()
            : base("name=dcAVL")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActiveA> ActiveAs { get; set; }
        public virtual DbSet<ActiveB> ActiveBs { get; set; }
        public virtual DbSet<GraderStateLookUp> GraderStateLookUps { get; set; }
        public virtual DbSet<VehicleList> VehicleLists { get; set; }
        public virtual DbSet<StateList> StateLists { get; set; }
        public virtual DbSet<GraderA> GraderAs { get; set; }
        public virtual DbSet<GraderB> GraderBs { get; set; }
        public virtual DbSet<SnowplowSanderA> SnowplowSanderAs { get; set; }
        public virtual DbSet<SnowplowSanderB> SnowplowSanderBs { get; set; }
        public virtual DbSet<MowerA> MowerAs { get; set; }
        public virtual DbSet<MowerB> MowerBs { get; set; }
        public virtual DbSet<PublicWorksA> PublicWorksAs { get; set; }
        public virtual DbSet<PublicWorksB> PublicWorksBs { get; set; }
        public virtual DbSet<PlowSanderPickupA> PlowSanderPickupAs { get; set; }
        public virtual DbSet<PlowSanderPickupB> PlowSanderPickupBs { get; set; }
        public virtual DbSet<SprayerA> SprayerAs { get; set; }
        public virtual DbSet<SprayerB> SprayerBs { get; set; }
        public virtual DbSet<SupervisorA> SupervisorAs { get; set; }
        public virtual DbSet<SupervisorB> SupervisorBs { get; set; }
        public virtual DbSet<PatchTruckA> PatchTruckAs { get; set; }
        public virtual DbSet<PatchTruckB> PatchTruckBs { get; set; }
        public virtual DbSet<WaterTruckA> WaterTruckAs { get; set; }
        public virtual DbSet<WaterTruckB> WaterTruckBs { get; set; }
        public virtual DbSet<AgPickupA> AgPickupAs { get; set; }
        public virtual DbSet<AgPickupB> AgPickupBs { get; set; }
    
        public virtual int spUpdateStateList(Nullable<int> sysId, string vehicleType, Nullable<int> state, string stateDesc)
        {
            var sysIdParameter = sysId.HasValue ?
                new ObjectParameter("SysId", sysId) :
                new ObjectParameter("SysId", typeof(int));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var stateDescParameter = stateDesc != null ?
                new ObjectParameter("StateDesc", stateDesc) :
                new ObjectParameter("StateDesc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStateList", sysIdParameter, vehicleTypeParameter, stateParameter, stateDescParameter);
        }
    
        public virtual int spUpdateVehicleList(Nullable<int> sysId, string vehicleType, string status)
        {
            var sysIdParameter = sysId.HasValue ?
                new ObjectParameter("SysId", sysId) :
                new ObjectParameter("SysId", typeof(int));
    
            var vehicleTypeParameter = vehicleType != null ?
                new ObjectParameter("VehicleType", vehicleType) :
                new ObjectParameter("VehicleType", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateVehicleList", sysIdParameter, vehicleTypeParameter, statusParameter);
        }
    }
}
